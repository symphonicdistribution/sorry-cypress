AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized sorry-cypress applications in AWS Fargate. An open-source, on-premise, self-hosted alternative to Cypress dashboard. Read more at https://github.com/agoldis/sorry-cypress
Parameters:
  StackName:
    Type: String
    Default: sorry-cypress-unique
    Description: The unique name of the stack that you are creating. Necessary to scope and identify resources created by that stack.
  TaskCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the task. 1024 is 1 CPU
  TaskMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the task
  DirectorPort:
    Type: Number
    Default: 8080
    Description: What port number to use for accessing director service
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  ECSCluster:
    Type: AWS::ECS::Cluster
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join
        - ':'
        - - !Ref AWS::StackName
          - fargate-sg
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - CidrIp: 52.23.137.21/32
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          Description: Stitch North America Regions
        - CidrIp: 52.204.223.208/32
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          Description: Stitch North America Regions
        - CidrIp: 52.204.228.32/32
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          Description: Stitch North America Regions
        - CidrIp: 52.204.230.227/32
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          Description: Stitch North America Regions
        - CidrIp: 172.109.140.42/32
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          Description: Allow access from the office NAT
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join
        - ':'
        - - !Ref AWS::StackName
          - load-balancer-sg
      GroupDescription: Access to the public facing load balancer
      SecurityGroupIngress:
        - CidrIp: 172.109.140.42/32
          IpProtocol: -1
          Description: Allow access from the office NAT
        - CidrIp: 54.196.161.58/32
          IpProtocol: -1
          Description: Allow access from the cypress bastion
        - CidrIp: 34.195.204.199/32
          IpProtocol: -1
          Description: Allow access from (sms-stg-2-ubuntu)
        - CidrIp: 52.20.247.67/32
          IpProtocol: -1
          Description: Allow access from (sms-cie-2-ubuntu)
        - CidrIp: 54.159.98.167/32
          IpProtocol: -1
          Description: Allow access from (qa-app-ubuntu)
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupDashboard
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicLoadBalancerListenerDirector:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupDirector
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: !Ref DirectorPort
      Protocol: HTTP
  TargetGroupDirector:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join
        - '-'
        - - !Ref AWS::StackName
          - director-tg
      Port: 1234
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  TargetGroupAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /.well-known/apollo/server-health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join
        - '-'
        - - !Ref AWS::StackName
          - api-tg
      Port: 4000
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  TargetGroupDashboard:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join
        - '-'
        - - !Ref AWS::StackName
          - dashboard-tg
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerRuleAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroupAPI
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /api
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 2
  PublicNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWS::StackName
          - NLB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref FargateContainerSecurityGroup
        - !Ref PublicLoadBalancerSG
      Type: network
  PublicNetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupMongo
          Type: forward
      LoadBalancerArn: !Ref PublicNetworkLoadBalancer
      Port: 27017
      Protocol: TCP
  TargetGroupMongo:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWS::StackName
          - NLB-Target
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckPort: 27017
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 27017
      Protocol: TCP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      TargetType: ip
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - !Ref AWS::StackName
          - test-results
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref AWS::StackName
              - s3-write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Join
                  - ''
                  - - !GetAtt S3Bucket.Arn
                    - /*
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  CloudWatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - /
        - - /ecs
          - !Ref AWS::StackName
          - logs
      RetentionInDays: 7
  MyEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
  MyEfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEfsFileSystem
      SubnetId: !Ref PublicSubnetOne
      SecurityGroups:
        - !Ref FargateContainerSecurityGroup
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: efs-volume-mongo
          EFSVolumeConfiguration:
            FilesystemId: !Ref MyEfsFileSystem
      Family: sorry-cypress-bundle-cf
      NetworkMode: awsvpc
      Memory: !Ref TaskMemory
      Cpu: !Ref TaskCpu
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: mongo:4
          Essential: true
          PortMappings:
            - ContainerPort: 27017
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGO_INITDB_ROOT_PASSWORD
              Value: sorry-cypress
            - Name: MONGO_INITDB_ROOT_USERNAME
              Value: sorry-cypress
          MountPoints:
            - ContainerPath: /data/db
              SourceVolume: efs-volume-mongo
          Name: mongo
        - Image: agoldis/sorry-cypress-director
          Essential: true
          PortMappings:
            - ContainerPort: 1234
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DASHBOARD_URL
              Value: !Join
                - ''
                - - http://
                  - !GetAtt PublicLoadBalancer.DNSName
            - Name: EXECUTION_DRIVER
              Value: ../execution/mongo/driver
            - Name: SCREENSHOTS_DRIVER
              Value: ../screenshots/s3.driver
            - Name: GITLAB_JOB_RETRIES
              Value: false
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: mongodb://sorry-cypress:sorry-cypress@127.0.0.1:27017
            - Name: S3_BUCKET
              Value: !Join
                - '-'
                - - !Ref AWS::StackName
                  - test-results
            - Name: S3_REGION
              Value: !Ref AWS::Region
            - Name: PROBE_LOGGER
              Value: 'false'
          DependsOn:
            - ContainerName: mongo
              Condition: START
          Name: director
        - Image: agoldis/sorry-cypress-api
          PortMappings:
            - ContainerPort: 4000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: mongodb://sorry-cypress:sorry-cypress@127.0.0.1:27017
            - Name: APOLLO_PLAYGROUND
              Value: false
          DependsOn:
            - ContainerName: director
              Condition: START
          Name: api
        - Image: agoldis/sorry-cypress-dashboard
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: GRAPHQL_SCHEMA_URL
              Value: /api
            - Name: PORT
              Value: 8080
            - Name: CI_URL
              Value: ''
          DependsOn:
            - ContainerName: api
              Condition: START
          Name: dashboard
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - EcsTaskDefinition
      - LoadBalancerRuleAPI
      - PublicNetworkLoadBalancerListener
    Properties:
      ServiceName: !Join
        - '-'
        - - !Ref AWS::StackName
          - ecs-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref EcsTaskDefinition
      LoadBalancers:
        - ContainerName: director
          ContainerPort: 1234
          TargetGroupArn: !Ref TargetGroupDirector
        - ContainerName: api
          ContainerPort: 4000
          TargetGroupArn: !Ref TargetGroupAPI
        - ContainerName: dashboard
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupDashboard
        - ContainerName: mongo
          ContainerPort: 27017
          TargetGroupArn: !Ref TargetGroupMongo
Outputs:
  DirectorURL:
    Description: DirectorURL
    Value: !Join
      - ''
      - - http://
        - !GetAtt PublicLoadBalancer.DNSName
        - ':'
        - !Ref DirectorPort
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - DirectorURL
  DashboardURL:
    Description: DashboardURL
    Value: !Join
      - ''
      - - http://
        - !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - DashboardURL
  ApiURL:
    Description: ApiURL
    Value: !Join
      - ''
      - - http://
        - !GetAtt PublicLoadBalancer.DNSName
        - /api
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - ApiURL